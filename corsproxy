#!venv/bin/python -u
import os
from urllib.parse import urlsplit, urlunsplit

import aiohttp
import uvicorn
from multidict import CIMultiDict
from starlette.applications import Starlette
from starlette.middleware import Middleware
from starlette.middleware.cors import CORSMiddleware
from starlette.requests import Request
from starlette.responses import Response
from starlette.routing import Route

prefixes = ["aggregator",
            "business-definition",
            "collect-matrix",
            "collect-api",
            "debt-management",
            "delorean",
            "invoices-management",
            "matrix",
            "payments",
            "reconciliation",
            "spend-back",
            "subscription",
            "myaccount"]

url_roots = {"/prod/app/": "https://app.agicap.com",
             "/preprod/app/": "https://preprod.agicap.cloud",
             "/dev/app/": "https://dev.agicap.cloud",
             "/prod/transformationmatrix/": "https://transformationmatrix.agicap.com",
             "/preprod/transformationmatrix/": "https://preprod-matrix.agicap.cloud",
             "/dev/transformationmatrix/": "https://dev-matrix.agicap.cloud"
             }

for prefix in prefixes:
    url_roots[f"/prod/{prefix}/"] = f"https://{prefix}.agicap.com"
    url_roots[f"/dev/{prefix}/"] = f"https://dev-{prefix}.agicap.cloud"
    url_roots[f"/preprod/{prefix}/"] = f"https://preprod-{prefix}.agicap.cloud"

print(url_roots)

LB_PREFIX = "/cors-proxy"
LB_PREPROD_PREFIX = "/cors-proxy-preprod"
session = None


async def get(request: Request) -> Response:
    global session
    if not session:
        session = aiohttp.ClientSession()
    # Chop scheme + netloc from URL
    url = urlunsplit(urlsplit(str(request.url))._replace(scheme='', netloc=''))
    url = url.replace(LB_PREPROD_PREFIX, "")
    url = url.replace(LB_PREFIX, "")
    for key, url_dest in url_roots.items():
        if url.startswith(key):
            url = url_dest + "/" + url.replace(key, "")
    print(f"url : {url}")
    method = request.method
    # print(request.method)
    hdr = request.headers
    # hdr_to_print = CIMultiDict((k, v) for k, v in hdr.items() if k.lower() != 'authorization')
    # print(hdr_to_print)
    hdr = CIMultiDict((k, v) for k, v in hdr.items() if (k.lower() != 'host' and k.lower() != 'accept-language'))

    if method == 'GET':
        func = session.get(url, headers=hdr)
    elif method == 'POST':
        func = session.post(url, headers=hdr, data=(await request.body()))
    elif method == 'PUT':
        func = session.put(url, headers=hdr, data=(await request.body()))
    elif method == 'PATCH':
        func = session.patch(url, headers=hdr, data=(await request.body()))
    elif method == 'DELETE':
        func = session.delete(url, headers=hdr)
    elif method == 'HEAD':
        func = session.head(url, headers=hdr)
    else:
        return Response(f'Unsupported HTML method "{method}"', 501)

    async with func as response:
        # Some servers have blank chars on end of key values which
        # Starlette does not like
        hdr = CIMultiDict((k, v.strip())
                          for k, v in response.headers.items() if k.lower() != 'content-encoding')
        hdr["Access-Control-Allow-Origin"] = "*"
        # hdr["Content-Type"] = "application/json"

        return Response((await response.read()), response.status, hdr)


# Set routes and middleware
routes = [Route('/{path:path}', get, methods=['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'HEAD'])]
middleware = [Middleware(CORSMiddleware, allow_origins=['*'],
                         allow_methods=['*'], allow_headers=['*'])]

# Create the app instance
app = Starlette(routes=routes, middleware=middleware)
uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", "8080")), server_header=False, date_header=False,
            log_level="debug")
